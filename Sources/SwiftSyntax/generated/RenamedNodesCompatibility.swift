//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@available(*, deprecated, renamed: "ImportPathComponentListSyntax")
public typealias AccessPathSyntax = ImportPathComponentListSyntax

@available(*, deprecated, renamed: "ImportPathComponentSyntax")
public typealias AccessPathComponentSyntax = ImportPathComponentSyntax

@available(*, deprecated, renamed: "AccessorDeclListSyntax")
public typealias AccessorListSyntax = AccessorDeclListSyntax

@available(*, deprecated, renamed: "AccessorParametersSyntax")
public typealias AccessorParameterSyntax = AccessorParametersSyntax

@available(*, deprecated, renamed: "AssociatedTypeDeclSyntax")
public typealias AssociatedtypeDeclSyntax = AssociatedTypeDeclSyntax

@available(*, deprecated, renamed: "SpecializeAvailabilityArgumentSyntax")
public typealias AvailabilityEntrySyntax = SpecializeAvailabilityArgumentSyntax

@available(*, deprecated, renamed: "AvailabilityArgumentListSyntax")
public typealias AvailabilitySpecListSyntax = AvailabilityArgumentListSyntax

@available(*, deprecated, renamed: "PlatformVersionSyntax")
public typealias AvailabilityVersionRestrictionSyntax = PlatformVersionSyntax

@available(*, deprecated, renamed: "PlatformVersionItemListSyntax")
public typealias AvailabilityVersionRestrictionListSyntax = PlatformVersionItemListSyntax

@available(*, deprecated, renamed: "PlatformVersionItemSyntax")
public typealias AvailabilityVersionRestrictionListEntrySyntax = PlatformVersionItemSyntax

@available(*, deprecated, renamed: "BackDeployedAttributeArgumentsSyntax")
public typealias BackDeployedAttributeSpecListSyntax = BackDeployedAttributeArgumentsSyntax

@available(*, deprecated, message: "'canImport' directives are now represented as a `FunctionCallExpr`")
public typealias CanImportExprSyntax = _CanImportExprSyntax

@available(*, deprecated, message: "'canImport' directives are now represented as a `FunctionCallExpr`")
public typealias CanImportVersionInfoSyntax = _CanImportVersionInfoSyntax

@available(*, deprecated, renamed: "SwitchCaseItemSyntax")
public typealias CaseItemSyntax = SwitchCaseItemSyntax

@available(*, deprecated, renamed: "SwitchCaseItemListSyntax")
public typealias CaseItemListSyntax = SwitchCaseItemListSyntax

@available(*, deprecated, renamed: "ClosureCaptureSyntax")
public typealias ClosureCaptureItemSyntax = ClosureCaptureSyntax

@available(*, deprecated, renamed: "ClosureCaptureListSyntax")
public typealias ClosureCaptureItemListSyntax = ClosureCaptureListSyntax

@available(*, deprecated, renamed: "ClosureCaptureSpecifierSyntax")
public typealias ClosureCaptureItemSpecifierSyntax = ClosureCaptureSpecifierSyntax

@available(*, deprecated, renamed: "ClosureCaptureClauseSyntax")
public typealias ClosureCaptureSignatureSyntax = ClosureCaptureClauseSyntax

@available(*, deprecated, renamed: "ClosureShorthandParameterSyntax")
public typealias ClosureParamSyntax = ClosureShorthandParameterSyntax

@available(*, deprecated, renamed: "ClosureShorthandParameterListSyntax")
public typealias ClosureParamListSyntax = ClosureShorthandParameterListSyntax

@available(*, deprecated, renamed: "SomeOrAnyTypeSyntax")
public typealias ConstrainedSugarTypeSyntax = SomeOrAnyTypeSyntax

@available(*, deprecated, renamed: "DeinitializerEffectSpecifiersSyntax")
public typealias DeinitEffectSpecifiersSyntax = DeinitializerEffectSpecifiersSyntax

@available(*, deprecated, renamed: "DerivativeAttributeArgumentsSyntax")
public typealias DerivativeRegistrationAttributeArgumentsSyntax = DerivativeAttributeArgumentsSyntax

@available(*, deprecated, renamed: "DesignatedTypeSyntax")
public typealias DesignatedTypeElementSyntax = DesignatedTypeSyntax

@available(*, deprecated, renamed: "DifferentiabilityArgumentSyntax")
public typealias DifferentiabilityParamSyntax = DifferentiabilityArgumentSyntax

@available(*, deprecated, renamed: "DifferentiabilityArgumentListSyntax")
public typealias DifferentiabilityParamListSyntax = DifferentiabilityArgumentListSyntax

@available(*, deprecated, renamed: "DifferentiabilityArgumentsSyntax")
public typealias DifferentiabilityParamsSyntax = DifferentiabilityArgumentsSyntax

@available(*, deprecated, renamed: "DifferentiabilityWithRespectToArgumentSyntax")
public typealias DifferentiabilityParamsClauseSyntax = DifferentiabilityWithRespectToArgumentSyntax

@available(*, deprecated, renamed: "DocumentationAttributeArgumentListSyntax")
public typealias DocumentationAttributeArgumentsSyntax = DocumentationAttributeArgumentListSyntax

@available(*, deprecated, renamed: "DynamicReplacementAttributeArgumentsSyntax")
public typealias DynamicReplacementArgumentsSyntax = DynamicReplacementAttributeArgumentsSyntax

@available(*, deprecated, renamed: "EffectsAttributeArgumentListSyntax")
public typealias EffectsArgumentsSyntax = EffectsAttributeArgumentListSyntax

@available(*, deprecated, renamed: "EnumCaseParameterClauseSyntax")
public typealias EnumCaseAssociatedValueSyntax = EnumCaseParameterClauseSyntax

@available(*, deprecated, renamed: "FallThroughStmtSyntax")
public typealias FallthroughStmtSyntax = FallThroughStmtSyntax

@available(*, deprecated, renamed: "ForStmtSyntax")
public typealias ForInStmtSyntax = ForStmtSyntax

@available(*, deprecated, renamed: "ForceUnwrapExprSyntax")
public typealias ForcedValueExprSyntax = ForceUnwrapExprSyntax

@available(*, deprecated, renamed: "DeclReferenceExprSyntax")
public typealias IdentifierExprSyntax = DeclReferenceExprSyntax

@available(*, deprecated, renamed: "LabeledSpecializeArgumentSyntax")
public typealias LabeledSpecializeEntrySyntax = LabeledSpecializeArgumentSyntax

@available(*, deprecated, renamed: "MemberBlockSyntax")
public typealias MemberDeclBlockSyntax = MemberBlockSyntax

@available(*, deprecated, renamed: "MemberBlockItemListSyntax")
public typealias MemberDeclListSyntax = MemberBlockItemListSyntax

@available(*, deprecated, renamed: "MemberBlockItemSyntax")
public typealias MemberDeclListItemSyntax = MemberBlockItemSyntax

@available(*, deprecated, renamed: "MemberTypeSyntax")
public typealias MemberTypeIdentifierSyntax = MemberTypeSyntax

@available(*, deprecated, renamed: "DeclModifierListSyntax")
public typealias ModifierListSyntax = DeclModifierListSyntax

@available(*, deprecated, renamed: "ConsumeExprSyntax")
public typealias MoveExprSyntax = ConsumeExprSyntax

@available(*, deprecated, renamed: "ObjCSelectorPieceListSyntax")
public typealias ObjCSelectorSyntax = ObjCSelectorPieceListSyntax

@available(*, deprecated, renamed: "OriginallyDefinedInAttributeArgumentsSyntax")
public typealias OriginallyDefinedInArgumentsSyntax = OriginallyDefinedInAttributeArgumentsSyntax

@available(*, deprecated, renamed: "PackElementTypeSyntax")
public typealias PackReferenceTypeSyntax = PackElementTypeSyntax

@available(*, deprecated, renamed: "FunctionParameterClauseSyntax")
public typealias ParameterClauseSyntax = FunctionParameterClauseSyntax

@available(*, deprecated, renamed: "PostfixOperatorExprSyntax")
public typealias PostfixUnaryExprSyntax = PostfixOperatorExprSyntax

@available(*, deprecated, renamed: "PoundSourceLocationArgumentsSyntax")
public typealias PoundSourceLocationArgsSyntax = PoundSourceLocationArgumentsSyntax

@available(*, deprecated, renamed: "PrecedenceGroupNameSyntax")
public typealias PrecedenceGroupNameElementSyntax = PrecedenceGroupNameSyntax

@available(*, deprecated, renamed: "RepeatStmtSyntax")
public typealias RepeatWhileStmtSyntax = RepeatStmtSyntax

@available(*, deprecated, renamed: "IdentifierTypeSyntax")
public typealias SimpleTypeIdentifierSyntax = IdentifierTypeSyntax

@available(*, deprecated, renamed: "SpecializeAttributeArgumentListSyntax")
public typealias SpecializeAttributeSpecListSyntax = SpecializeAttributeArgumentListSyntax

@available(*, deprecated, renamed: "GenericSpecializationExprSyntax")
public typealias SpecializeExprSyntax = GenericSpecializationExprSyntax

@available(*, deprecated, renamed: "StringLiteralSegmentListSyntax")
public typealias StringLiteralSegmentsSyntax = StringLiteralSegmentListSyntax

@available(*, deprecated, renamed: "SubscriptCallExprSyntax")
public typealias SubscriptExprSyntax = SubscriptCallExprSyntax

@available(*, deprecated, renamed: "SuperExprSyntax")
public typealias SuperRefExprSyntax = SuperExprSyntax

@available(*, deprecated, renamed: "SpecializeTargetFunctionArgumentSyntax")
public typealias TargetFunctionEntrySyntax = SpecializeTargetFunctionArgumentSyntax

@available(*, deprecated, renamed: "LabeledExprSyntax")
public typealias TupleExprElementSyntax = LabeledExprSyntax

@available(*, deprecated, renamed: "LabeledExprListSyntax")
public typealias TupleExprElementListSyntax = LabeledExprListSyntax

@available(*, deprecated, renamed: "InheritanceClauseSyntax")
public typealias TypeInheritanceClauseSyntax = InheritanceClauseSyntax

@available(*, deprecated, renamed: "SimpleTypeSpecifierSyntax")
public typealias TypeSpecifierSyntax = SimpleTypeSpecifierSyntax

@available(*, deprecated, renamed: "TypeAliasDeclSyntax")
public typealias TypealiasDeclSyntax = TypeAliasDeclSyntax

@available(*, deprecated, renamed: "UnavailableFromAsyncAttributeArgumentsSyntax")
public typealias UnavailableFromAsyncArgumentsSyntax = UnavailableFromAsyncAttributeArgumentsSyntax

@available(*, deprecated, renamed: "PatternExprSyntax")
public typealias UnresolvedPatternExprSyntax = PatternExprSyntax

@available(*, deprecated, renamed: "YieldedExpressionListSyntax")
public typealias YieldExprListSyntax = YieldedExpressionListSyntax

@available(*, deprecated, renamed: "YieldedExpressionSyntax")
public typealias YieldExprListElementSyntax = YieldedExpressionSyntax

@available(*, deprecated, renamed: "YieldedExpressionsClauseSyntax")
public typealias YieldListSyntax = YieldedExpressionsClauseSyntax

public extension SyntaxKind {
  @available(*, deprecated, renamed: "ImportPathComponentListSyntax")
  static var accessPath: Self {
    return .importPathComponentList
  }
  
  @available(*, deprecated, renamed: "ImportPathComponentSyntax")
  static var accessPathComponent: Self {
    return .importPathComponent
  }
  
  @available(*, deprecated, renamed: "AccessorDeclListSyntax")
  static var accessorList: Self {
    return .accessorDeclList
  }
  
  @available(*, deprecated, renamed: "AccessorParametersSyntax")
  static var accessorParameter: Self {
    return .accessorParameters
  }
  
  @available(*, deprecated, renamed: "AssociatedTypeDeclSyntax")
  static var associatedtypeDecl: Self {
    return .associatedTypeDecl
  }
  
  @available(*, deprecated, renamed: "SpecializeAvailabilityArgumentSyntax")
  static var availabilityEntry: Self {
    return .specializeAvailabilityArgument
  }
  
  @available(*, deprecated, renamed: "AvailabilityArgumentListSyntax")
  static var availabilitySpecList: Self {
    return .availabilityArgumentList
  }
  
  @available(*, deprecated, renamed: "PlatformVersionSyntax")
  static var availabilityVersionRestriction: Self {
    return .platformVersion
  }
  
  @available(*, deprecated, renamed: "PlatformVersionItemListSyntax")
  static var availabilityVersionRestrictionList: Self {
    return .platformVersionItemList
  }
  
  @available(*, deprecated, renamed: "PlatformVersionItemSyntax")
  static var availabilityVersionRestrictionListEntry: Self {
    return .platformVersionItem
  }
  
  @available(*, deprecated, renamed: "BackDeployedAttributeArgumentsSyntax")
  static var backDeployedAttributeSpecList: Self {
    return .backDeployedAttributeArguments
  }
  
  @available(*, deprecated, message: "'canImport' directives are now represented as a `FunctionCallExpr`")
  static var canImportExpr: Self {
    return ._canImportExpr
  }
  
  @available(*, deprecated, message: "'canImport' directives are now represented as a `FunctionCallExpr`")
  static var canImportVersionInfo: Self {
    return ._canImportVersionInfo
  }
  
  @available(*, deprecated, renamed: "SwitchCaseItemSyntax")
  static var caseItem: Self {
    return .switchCaseItem
  }
  
  @available(*, deprecated, renamed: "SwitchCaseItemListSyntax")
  static var caseItemList: Self {
    return .switchCaseItemList
  }
  
  @available(*, deprecated, renamed: "ClosureCaptureSyntax")
  static var closureCaptureItem: Self {
    return .closureCapture
  }
  
  @available(*, deprecated, renamed: "ClosureCaptureListSyntax")
  static var closureCaptureItemList: Self {
    return .closureCaptureList
  }
  
  @available(*, deprecated, renamed: "ClosureCaptureSpecifierSyntax")
  static var closureCaptureItemSpecifier: Self {
    return .closureCaptureSpecifier
  }
  
  @available(*, deprecated, renamed: "ClosureCaptureClauseSyntax")
  static var closureCaptureSignature: Self {
    return .closureCaptureClause
  }
  
  @available(*, deprecated, renamed: "ClosureShorthandParameterSyntax")
  static var closureParam: Self {
    return .closureShorthandParameter
  }
  
  @available(*, deprecated, renamed: "ClosureShorthandParameterListSyntax")
  static var closureParamList: Self {
    return .closureShorthandParameterList
  }
  
  @available(*, deprecated, renamed: "SomeOrAnyTypeSyntax")
  static var constrainedSugarType: Self {
    return .someOrAnyType
  }
  
  @available(*, deprecated, renamed: "DeinitializerEffectSpecifiersSyntax")
  static var deinitEffectSpecifiers: Self {
    return .deinitializerEffectSpecifiers
  }
  
  @available(*, deprecated, renamed: "DerivativeAttributeArgumentsSyntax")
  static var derivativeRegistrationAttributeArguments: Self {
    return .derivativeAttributeArguments
  }
  
  @available(*, deprecated, renamed: "DesignatedTypeSyntax")
  static var designatedTypeElement: Self {
    return .designatedType
  }
  
  @available(*, deprecated, renamed: "DifferentiabilityArgumentSyntax")
  static var differentiabilityParam: Self {
    return .differentiabilityArgument
  }
  
  @available(*, deprecated, renamed: "DifferentiabilityArgumentListSyntax")
  static var differentiabilityParamList: Self {
    return .differentiabilityArgumentList
  }
  
  @available(*, deprecated, renamed: "DifferentiabilityArgumentsSyntax")
  static var differentiabilityParams: Self {
    return .differentiabilityArguments
  }
  
  @available(*, deprecated, renamed: "DifferentiabilityWithRespectToArgumentSyntax")
  static var differentiabilityParamsClause: Self {
    return .differentiabilityWithRespectToArgument
  }
  
  @available(*, deprecated, renamed: "DocumentationAttributeArgumentListSyntax")
  static var documentationAttributeArguments: Self {
    return .documentationAttributeArgumentList
  }
  
  @available(*, deprecated, renamed: "DynamicReplacementAttributeArgumentsSyntax")
  static var dynamicReplacementArguments: Self {
    return .dynamicReplacementAttributeArguments
  }
  
  @available(*, deprecated, renamed: "EffectsAttributeArgumentListSyntax")
  static var effectsArguments: Self {
    return .effectsAttributeArgumentList
  }
  
  @available(*, deprecated, renamed: "EnumCaseParameterClauseSyntax")
  static var enumCaseAssociatedValue: Self {
    return .enumCaseParameterClause
  }
  
  @available(*, deprecated, renamed: "FallThroughStmtSyntax")
  static var fallthroughStmt: Self {
    return .fallThroughStmt
  }
  
  @available(*, deprecated, renamed: "ForStmtSyntax")
  static var forInStmt: Self {
    return .forStmt
  }
  
  @available(*, deprecated, renamed: "ForceUnwrapExprSyntax")
  static var forcedValueExpr: Self {
    return .forceUnwrapExpr
  }
  
  @available(*, deprecated, renamed: "DeclReferenceExprSyntax")
  static var identifierExpr: Self {
    return .declReferenceExpr
  }
  
  @available(*, deprecated, renamed: "LabeledSpecializeArgumentSyntax")
  static var labeledSpecializeEntry: Self {
    return .labeledSpecializeArgument
  }
  
  @available(*, deprecated, renamed: "MemberBlockSyntax")
  static var memberDeclBlock: Self {
    return .memberBlock
  }
  
  @available(*, deprecated, renamed: "MemberBlockItemListSyntax")
  static var memberDeclList: Self {
    return .memberBlockItemList
  }
  
  @available(*, deprecated, renamed: "MemberBlockItemSyntax")
  static var memberDeclListItem: Self {
    return .memberBlockItem
  }
  
  @available(*, deprecated, renamed: "MemberTypeSyntax")
  static var memberTypeIdentifier: Self {
    return .memberType
  }
  
  @available(*, deprecated, renamed: "DeclModifierListSyntax")
  static var modifierList: Self {
    return .declModifierList
  }
  
  @available(*, deprecated, renamed: "ConsumeExprSyntax")
  static var moveExpr: Self {
    return .consumeExpr
  }
  
  @available(*, deprecated, renamed: "ObjCSelectorPieceListSyntax")
  static var objCSelector: Self {
    return .objCSelectorPieceList
  }
  
  @available(*, deprecated, renamed: "OriginallyDefinedInAttributeArgumentsSyntax")
  static var originallyDefinedInArguments: Self {
    return .originallyDefinedInAttributeArguments
  }
  
  @available(*, deprecated, renamed: "PackElementTypeSyntax")
  static var packReferenceType: Self {
    return .packElementType
  }
  
  @available(*, deprecated, renamed: "FunctionParameterClauseSyntax")
  static var parameterClause: Self {
    return .functionParameterClause
  }
  
  @available(*, deprecated, renamed: "PostfixOperatorExprSyntax")
  static var postfixUnaryExpr: Self {
    return .postfixOperatorExpr
  }
  
  @available(*, deprecated, renamed: "PoundSourceLocationArgumentsSyntax")
  static var poundSourceLocationArgs: Self {
    return .poundSourceLocationArguments
  }
  
  @available(*, deprecated, renamed: "PrecedenceGroupNameSyntax")
  static var precedenceGroupNameElement: Self {
    return .precedenceGroupName
  }
  
  @available(*, deprecated, renamed: "RepeatStmtSyntax")
  static var repeatWhileStmt: Self {
    return .repeatStmt
  }
  
  @available(*, deprecated, renamed: "IdentifierTypeSyntax")
  static var simpleTypeIdentifier: Self {
    return .identifierType
  }
  
  @available(*, deprecated, renamed: "SpecializeAttributeArgumentListSyntax")
  static var specializeAttributeSpecList: Self {
    return .specializeAttributeArgumentList
  }
  
  @available(*, deprecated, renamed: "GenericSpecializationExprSyntax")
  static var specializeExpr: Self {
    return .genericSpecializationExpr
  }
  
  @available(*, deprecated, renamed: "StringLiteralSegmentListSyntax")
  static var stringLiteralSegments: Self {
    return .stringLiteralSegmentList
  }
  
  @available(*, deprecated, renamed: "SubscriptCallExprSyntax")
  static var subscriptExpr: Self {
    return .subscriptCallExpr
  }
  
  @available(*, deprecated, renamed: "SuperExprSyntax")
  static var superRefExpr: Self {
    return .superExpr
  }
  
  @available(*, deprecated, renamed: "SpecializeTargetFunctionArgumentSyntax")
  static var targetFunctionEntry: Self {
    return .specializeTargetFunctionArgument
  }
  
  @available(*, deprecated, renamed: "LabeledExprSyntax")
  static var tupleExprElement: Self {
    return .labeledExpr
  }
  
  @available(*, deprecated, renamed: "LabeledExprListSyntax")
  static var tupleExprElementList: Self {
    return .labeledExprList
  }
  
  @available(*, deprecated, renamed: "InheritanceClauseSyntax")
  static var typeInheritanceClause: Self {
    return .inheritanceClause
  }
  
  @available(*, deprecated, renamed: "SimpleTypeSpecifierSyntax")
  static var typeSpecifier: Self {
    return .simpleTypeSpecifier
  }
  
  @available(*, deprecated, renamed: "TypeAliasDeclSyntax")
  static var typealiasDecl: Self {
    return .typeAliasDecl
  }
  
  @available(*, deprecated, renamed: "UnavailableFromAsyncAttributeArgumentsSyntax")
  static var unavailableFromAsyncArguments: Self {
    return .unavailableFromAsyncAttributeArguments
  }
  
  @available(*, deprecated, renamed: "PatternExprSyntax")
  static var unresolvedPatternExpr: Self {
    return .patternExpr
  }
  
  @available(*, deprecated, renamed: "YieldedExpressionListSyntax")
  static var yieldExprList: Self {
    return .yieldedExpressionList
  }
  
  @available(*, deprecated, renamed: "YieldedExpressionSyntax")
  static var yieldExprListElement: Self {
    return .yieldedExpression
  }
  
  @available(*, deprecated, renamed: "YieldedExpressionsClauseSyntax")
  static var yieldList: Self {
    return .yieldedExpressionsClause
  }
}
